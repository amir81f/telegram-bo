import logging
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# Set up logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

# Define a function to start the bot
def start(update: object, context: CallbackContext) -> None:
    """Send a message when the command /start is issued."""
    update.message.reply_text('Hi!')

# Define a function to echo the user's message
def echo(update: object, context: CallbackContext) -> None:
    """Echo the user's message."""
    update.message.reply_text(update.message.text)

# Define a function to handle errors
def error_handler(update: object, context: CallbackContext) -> None:
    """Log Errors caused by Updates."""
    logging.warning(f"Update {update} caused error {context.error}")

# Define a function to handle unknown commands
def unknown(update: object, context: CallbackContext) -> None:
    """Send a message when the user sends an unknown command."""
    update.message.reply_text("Sorry, I didn't understand that command.")

# Create an Updater object and attach the handlers to it
updater = Updater(token='<BOT_TOKEN>', use_context=True)

dispatcher = updater.dispatcher
dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(CommandHandler("help", unknown))
dispatcher.add_handler(MessageHandler(Filters.command, unknown))
dispatcher.add_handler(MessageHandler(Filters.text, echo))

# Set up error handling
dispatcher.add_error_handler(error_handler)

# Start polling for updates from Telegram
updater.start_polling()

# Run the bot until the user presses Ctrl-C or the process receives SIGINT, SIGTERM or SIGABRT
updater.idle()
